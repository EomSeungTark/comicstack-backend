{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sa/dev/git/comicstack-backend/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/sa/dev/git/comicstack-backend/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/sa/dev/git/comicstack-backend/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/sa/dev/git/comicstack-backend/webapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useReducer,useContext,createContext}from\"react\";import axios from\"axios\";// import { defaultValue } from 'model/lecture.model';\nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState={error:false,loading:false,entities:[{episode:0,episode_name:\"\",thumbnail_path:\"\",views:0,toon_sid:0,create_at:\"\"}]};function reducer(state,action){switch(action.type){case\"GET_LIST\":return _objectSpread(_objectSpread({},state),{},{entities:action.payload,loading:true});default:throw new Error(\"Unhanded action type: \".concat(action.type));}}var EpisodeListStateContext=/*#__PURE__*/createContext(initialState);var EpisodeListDispatchcontext=/*#__PURE__*/createContext(null);export function useStateEpisodeList(){return useContext(EpisodeListStateContext);}export function useDispatchEpisodeList(){return useContext(EpisodeListDispatchcontext);}export var EpisodeListProvider=function EpisodeListProvider(_ref){var children=_ref.children;var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(EpisodeListStateContext.Provider,{value:state,children:/*#__PURE__*/_jsx(EpisodeListDispatchcontext.Provider,{value:dispatch,children:children})});};export function getList(_x,_x2){return _getList.apply(this,arguments);}function _getList(){_getList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,toonId){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.post(\"/api/toon/getepisodes\",{toon_sid:parseInt(toonId)});case 3:response=_context.sent;console.log(\"get epidsode list \",response.data);if(response.data){dispatch({type:\"GET_LIST\",payload:response.data.episodes_info});}_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);//dispatch({ type: \"GET_DATA_FAIL\", error: e });\nconsole.log(_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return _getList.apply(this,arguments);}","map":{"version":3,"sources":["/Users/sa/dev/git/comicstack-backend/webapp/src/contextAPI/episode.js"],"names":["React","useReducer","useContext","createContext","axios","initialState","error","loading","entities","episode","episode_name","thumbnail_path","views","toon_sid","create_at","reducer","state","action","type","payload","Error","EpisodeListStateContext","EpisodeListDispatchcontext","useStateEpisodeList","useDispatchEpisodeList","EpisodeListProvider","children","dispatch","getList","toonId","post","parseInt","response","console","log","data","episodes_info"],"mappings":"ooBAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,UAA5B,CAAwCC,aAAxC,KAA6D,OAA7D,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA;2CAGA,GAAMC,CAAAA,YAAY,CAAG,CACpBC,KAAK,CAAE,KADa,CAEpBC,OAAO,CAAE,KAFW,CAGpBC,QAAQ,CAAE,CAAC,CACVC,OAAO,CAAE,CADC,CAERC,YAAY,CAAE,EAFN,CAGVC,cAAc,CAAE,EAHN,CAIVC,KAAK,CAAE,CAJG,CAKVC,QAAQ,CAAE,CALA,CAMVC,SAAS,CAAE,EAND,CAAD,CAHU,CAArB,CAcA,QAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwBC,MAAxB,CAAgC,CAC9B,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,UAAL,CACE,sCACKF,KADL,MAEER,QAAQ,CAAES,MAAM,CAACE,OAFnB,CAGFZ,OAAO,CAAE,IAHP,GAKF,QACE,KAAM,IAAIa,CAAAA,KAAJ,iCAAmCH,MAAM,CAACC,IAA1C,EAAN,CARJ,CAUD,CAED,GAAMG,CAAAA,uBAAuB,cAAGlB,aAAa,CAACE,YAAD,CAA7C,CACA,GAAMiB,CAAAA,0BAA0B,cAAGnB,aAAa,CAAC,IAAD,CAAhD,CAEA,MAAO,SAASoB,CAAAA,mBAAT,EAA+B,CACpC,MAAOrB,CAAAA,UAAU,CAACmB,uBAAD,CAAjB,CACD,CAED,MAAO,SAASG,CAAAA,sBAAT,EAAkC,CACvC,MAAOtB,CAAAA,UAAU,CAACoB,0BAAD,CAAjB,CACD,CAED,MAAO,IAAMG,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,MAAgB,IAAdC,CAAAA,QAAc,MAAdA,QAAc,iBACvBzB,UAAU,CAACc,OAAD,CAAUV,YAAV,CADa,4CAC1CW,KAD0C,iBACnCW,QADmC,iBAGjD,mBACE,KAAC,uBAAD,CAAyB,QAAzB,EAAkC,KAAK,CAAEX,KAAzC,uBACE,KAAC,0BAAD,CAA4B,QAA5B,EAAqC,KAAK,CAAEW,QAA5C,UACGD,QADH,EADF,EADF,CAOD,CAVM,CAYP,eAAsBE,CAAAA,OAAtB,gD,qFAAO,iBAAuBD,QAAvB,CAAiCE,MAAjC,qKAEoBzB,CAAAA,KAAK,CAAC0B,IAAN,CACxB,uBADwB,CAExB,CAACjB,QAAQ,CAAEkB,QAAQ,CAACF,MAAD,CAAnB,CAFwB,CAFpB,QAEGG,QAFH,eAOHC,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAAkCF,QAAQ,CAACG,IAA3C,EACA,GAAIH,QAAQ,CAACG,IAAb,CAAmB,CACjBR,QAAQ,CAAC,CAAET,IAAI,CAAE,UAAR,CAAoBC,OAAO,CAAEa,QAAQ,CAACG,IAAT,CAAcC,aAA3C,CAAD,CAAR,CACD,CAVE,+EAYH;AACAH,OAAO,CAACC,GAAR,cAbG,oE","sourcesContent":["import React, { useReducer, useContext, createContext } from \"react\";\nimport axios from \"axios\";\n// import { defaultValue } from 'model/lecture.model';\n\n\nconst initialState = {\n\terror: false,\n\tloading: false,\n\tentities: [{\n\t\tepisode: 0,\n    episode_name: \"\",\n\t\tthumbnail_path: \"\",\n\t\tviews: 0,\n\t\ttoon_sid: 0,\n\t\tcreate_at: \"\",\n  }],\n}\n\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"GET_LIST\":\n      return {\n        ...state,\n        entities: action.payload,\n\t\t\t\tloading: true\n      };\n    default:\n      throw new Error(`Unhanded action type: ${action.type}`);\n  }\n}\n\nconst EpisodeListStateContext = createContext(initialState);\nconst EpisodeListDispatchcontext = createContext(null);\n\nexport function useStateEpisodeList() {\n  return useContext(EpisodeListStateContext);\n}\n\nexport function useDispatchEpisodeList() {\n  return useContext(EpisodeListDispatchcontext);\n}\n\nexport const EpisodeListProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <EpisodeListStateContext.Provider value={state}>\n      <EpisodeListDispatchcontext.Provider value={dispatch}>\n        {children}\n      </EpisodeListDispatchcontext.Provider>\n    </EpisodeListStateContext.Provider>\n  );\n}\n\nexport async function getList(dispatch, toonId) {\n  try {\n    const response = await axios.post(\n\t\t\t\"/api/toon/getepisodes\", \n\t\t\t{toon_sid: parseInt(toonId)}\n\t\t);\n\t\t\n    console.log(\"get epidsode list \", response.data);\n    if (response.data) {\n      dispatch({ type: \"GET_LIST\", payload: response.data.episodes_info });\n    }\n  } catch (e) {\n    //dispatch({ type: \"GET_DATA_FAIL\", error: e });\n    console.log(e);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}